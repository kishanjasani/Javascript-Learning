Primitive datatype : Means this all are not object.
=========================================================
Number:    Floating point numbers, for decimals and integers.
String:    Sequence of characters, used for text.
Boolean:   Logical data type that can only be true or false.
Undefined: Data type of a variable which does not have a value yet.
Null:      Also means 'non-existent'.

Javascript has dynamic typing :- means we do not have to declare variable type.

Precedence table : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

History of Javascript : 

1996: Changed from livescript to javascript to attract java developers.

1997: ECMAScript 1 became the first version of the javascript language standard:
* ECMAScript: The language standard;
* JavaScript: The language in practice.

2009: ECMAScript 5 (ES5) was released with lots of new features.

2015: ECMAScript 2015 (ES6) was released: the biggest update ever.

2015: ECMAScript 2016 (ES2016) was released with minor changes.

ES5 : 
    *   Fully supported in all modern browsers.
    *   Ready to be used today (2016).

ES6/ES2015 :
    *   Only partial support in modern browsers, no support in older browsers;
    *   Can't use it in production today.

ES2016 :
    *   Almost no support in modern browsers;
    *   Can't use it in production today.

Why we are using ES5 :
    *   ECMAScript 2015 still has very incomplete browser support today.
    *   When working on older codebases, these will be written in ES5.
    *   it's easier to learn ES5 and then upgrade to ES6/ES2015.

How javascript works behind scenes : Javascript parser and engine
    *   


    OUR CODE  ====>  JAVASCRIPT ENGINE (Spider monkey, Google's v8 engine that is using google chrome.)

In Javascript engine first thing happnes is -> Parser( Which reads our code line by line and checks if the syntax of the code that we gave it is correct. ) Abstract syntax tree -> If every thing is currect than parser produces a datastructure know as the abstract syntax tree. which transalte into
                                                    -> Machine code -> so this code is no longer javascript code and that code is directly converted to computer or processor.
                                                            -> Code runs

=> Execution contexts and the execution stack :
    *   Execution contexts :
        =>  All JS code needs to run in environment & this environment is called Execution contexts.
        => A box or container, or a wrapper which stores variables and in which a piece of our code is evaluted and executed

    => The Default Execution context is the GLOBAL Execution contexts.
        ->  Code that is not inside any function.
        ->  Associated with the global object.
        ->  In the browser, that's the window object.

        lastName === window.lastName;   //true

****************************************************************************************************************************
                                                    Global Execution Context
****************************************************************************************************************************

var fname = 'Kishan';

function first() {
    var a = 'Hello!';
    second();
    var x = a + fname;
    console.log( x );
}

function second() {
    var b = 'Hii!';
    third();
    var y = b + fname;
    console.log( y );
}

function third() {
    var c = 'Hey!';
    var z = c + fname;
    console.log( z );
}

first();